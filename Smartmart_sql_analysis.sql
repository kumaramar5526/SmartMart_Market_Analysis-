-- ===========================================
-- SmartMart Retail Analytics - SQL Analyst Work
-- This file contains table creation, data import, cleaning, and analysis queries.
-- ===========================================

-- =====================================================
-- 1. Create Tables
-- =====================================================

-- Customers Table
CREATE TABLE customers (
    customer_id VARCHAR(20) PRIMARY KEY,
    name TEXT,
    age INT,
    gender VARCHAR(10),
    city VARCHAR(50),
    loyalty_member VARCHAR(5)
);

-- Products Table
CREATE TABLE products (
    product_id VARCHAR(20) PRIMARY KEY,
    product_name TEXT,
    category VARCHAR(50),
    price NUMERIC(10,2),
    cost NUMERIC(10,2),
    unit_size VARCHAR(10),
    pack_size INT
);

-- Stores Table
CREATE TABLE stores (
    store_id INT PRIMARY KEY,
    city VARCHAR(50),
    store_format VARCHAR(50)
);

-- Stock Levels Table
CREATE TABLE stock_levels (
    store_id INT,
    sku_id VARCHAR(20),
    stock_date DATE,
    on_hand_qty INT,
    on_order_qty INT,
    safety_stock INT,
    lead_time_days INT,
    PRIMARY KEY (store_id, sku_id, stock_date),
    FOREIGN KEY (store_id) REFERENCES stores(store_id),
    FOREIGN KEY (sku_id) REFERENCES products(product_id)
);

-- Sales Transactions Table
CREATE TABLE sales_transactions (
    transaction_id INT PRIMARY KEY,
    store_id INT,
    sku_id VARCHAR(20),
    transaction_date DATE,
    qty INT,
    unit_price NUMERIC(10,2),
    customer_id VARCHAR(20),
    FOREIGN KEY (store_id) REFERENCES stores(store_id),
    FOREIGN KEY (sku_id) REFERENCES products(product_id),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);


-- =====================================================
-- 2. Data Import
-- =====================================================

COPY customers(customer_id, name, city, age, gender, loyalty_member)
FROM 'C:/Users/Amarjit kumar/Desktop/Data Analytics Internship/Project/Clean Dataset/customers_clean.csv'
DELIMITER ',' CSV HEADER;

COPY products(product_id, product_name, category, price, cost, unit_size, pack_size)
FROM 'C:/Users/Amarjit kumar/Desktop/Data Analytics Internship/Project/Clean Dataset/products_clean.csv'
DELIMITER ',' CSV HEADER;

COPY stores(store_id, city, store_format)
FROM 'C:/Users/Amarjit kumar/Desktop/Data Analytics Internship/Project/Clean Dataset/stores_clean.csv'
DELIMITER ',' CSV HEADER;

COPY stock_levels(store_id, sku_id, stock_date, on_hand_qty, on_order_qty, safety_stock, lead_time_days)
FROM 'C:/Users/Amarjit kumar/Desktop/Data Analytics Internship/Project/Clean Dataset/stock_levels_clean.csv'
DELIMITER ',' CSV HEADER;

COPY sales_transactions(transaction_id, store_id, sku_id, transaction_date, qty, unit_price, customer_id)
FROM 'C:/Users/Amarjit kumar/Desktop/Data Analytics Internship/Project/Clean Dataset/sales_transactions_clean.csv'
DELIMITER ',' CSV HEADER;

-- ===========================================
-- 3. Data Cleaning Queries
-- ===========================================

-- Remove duplicate sales records
DELETE FROM sales_transactions a
USING sales_transactions b
WHERE a.transaction_id < b.transaction_id
  AND a.transaction_date = b.transaction_date
  AND a.store_id = b.store_id
  AND a.sku_id = b.sku_id
  AND a.customer_id = b.customer_id;

-- Handle missing gender values in customers
UPDATE customers
SET gender = 'Unknown'
WHERE gender IS NULL OR gender = '';

-- ===========================================
-- 4. Analysis Queries
-- ===========================================

-- (A) Total Sales by Product
-- Shows total units sold and revenue for each product
SELECT p.product_name, SUM(s.qty) AS total_units, SUM(s.qty * s.unit_price) AS revenue
FROM sales_transactions s
JOIN products p ON s.sku_id = p.product_id
GROUP BY p.product_name
ORDER BY revenue DESC;

-- (B) Top 5 Customers by Spending
-- Identifies the top 5 customers who spent the most
SELECT c.customer_id, c.name, SUM(s.qty * s.unit_price) AS total_spent
FROM sales_transactions s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.customer_id, c.name
ORDER BY total_spent DESC
LIMIT 5;

-- (C) Store-wise Sales
-- Shows total revenue generated by each store
SELECT st.store_id, st.city, SUM(s.qty * s.unit_price) AS store_sales
FROM sales_transactions s
JOIN stores st ON s.store_id = st.store_id
GROUP BY st.store_id, st.city
ORDER BY store_sales DESC;

-- (D) Stock Optimization
-- Finds products with stock running low (< 20 units)
SELECT st.store_id, p.product_name, sl.on_hand_qty
FROM stock_levels sl
JOIN stores st ON sl.store_id = st.store_id
JOIN products p ON sl.sku_id = p.product_id
WHERE sl.on_hand_qty < 20
ORDER BY sl.on_hand_qty ASC;

-- (E) Frequently Bought Together (Basic)
-- Finds top product pairs often bought together on same date by same customer
SELECT s1.sku_id AS product_a, s2.sku_id AS product_b, COUNT(*) AS frequency
FROM sales_transactions s1
JOIN sales_transactions s2
  ON s1.transaction_id <> s2.transaction_id
 AND s1.customer_id = s2.customer_id
 AND s1.transaction_date = s2.transaction_date
WHERE s1.sku_id < s2.sku_id
GROUP BY s1.sku_id, s2.sku_id
ORDER BY frequency DESC
LIMIT 10;

-- ===========================================
-- End of SQL File
-- ===========================================
